<?php
require 'vendor/autoload.php'; // Include Composer dependencies
use Dotenv\Dotenv;

// Enable error reporting
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Load environment variables
$dotenv = Dotenv::createImmutable(__DIR__);
$dotenv->load();

header('Content-Type: application/json');
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Allow-Headers: Content-Type");

try {
    // Capture the input data
    $input = file_get_contents('php://input');
    $data = json_decode($input, true);

    // Validate the input
    if (!isset($data['amount']) || !isset($data['method']) || !isset($data['email'])) {
        echo json_encode(['status' => 'error', 'message' => 'Missing required parameters']);
        exit;
    }

    $amount = (float) $data['amount']; // Amount in BRL
    $method = $data['method']; // Payment method (pix, credit_card, etc.)
    $email = $data['email']; // Customer email

    // Initialize MercadoPago SDK
    \MercadoPago\SDK::setAccessToken($_ENV['MERCADOPAGO_ACCESS_TOKEN']);

    $payment = new \MercadoPago\Payment();
    $payment->transaction_amount = $amount;
    $payment->description = "Payment for order";
    $payment->payer = ["email" => $email];

    if ($method === 'pix') {
        $payment->payment_method_id = "pix";
    } elseif ($method === 'credit_card') {
        $payment->payment_method_id = "visa"; // Example for Visa
        $payment->token = $data['card_token']; // Card token generated by the front-end
    } else {
        echo json_encode(['status' => 'error', 'message' => 'Unsupported payment method']);
        exit;
    }

    // Save the payment
    $payment->save();

    // Handle payment result
    if ($payment->error) {
        echo json_encode(['status' => 'error', 'message' => $payment->error->message]);
        exit;
    }

    if ($method === 'pix') {
        // Return PIX-specific details like QR code
        echo json_encode([
            'status' => $payment->status,
            'message' => $payment->status === 'approved' ? 'Payment successful!' : 'Payment pending.',
            'payment_id' => $payment->id,
            'pix_qr_code' => $payment->point_of_interaction->transaction_data->qr_code,
            'pix_link' => $payment->point_of_interaction->transaction_data->qr_code_base64
        ]);
    } else {
        // For other methods like credit card
        echo json_encode([
            'status' => $payment->status,
            'message' => $payment->status === 'approved' ? 'Payment successful!' : 'Payment pending.',
            'payment_id' => $payment->id,
        ]);
    }
} catch (Exception $e) {
    echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
}
